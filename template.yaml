AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Combined template for both validating and processing subscribers information

Resources:
  # Lambda Function for Schema Validation
  validateSubscribers:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://your-bucket-name/validateSubscribers.zip
      Description: This is the function that validates subscribers
      Handler: lambda_function.lambda_handler
      Runtime: python3.12
      MemorySize: 128
      Timeout: 3
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /subscribe
            Method: POST

  # Lambda Function for Processing Valid Subscribers
  processValidSubscribers:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://your-bucket-name/processValidSubscribers.zip
      Description: This is the function that processes valid subscribers
      Handler: lambda_function.lambda_handler
      Runtime: python3.12
      MemorySize: 128
      Timeout: 3
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        SQS1:
          Type: SQS
          Properties:
            Queue: !GetAtt SQSQueue1.QueueUrl
            BatchSize: 10

  # SQS Queue
  SQSQueue1:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: SQSQueue1
      SqsManagedSseEnabled: true

  # S3 Bucket for Invalid Records
  InvalidRecordsBucket:
    Type: AWS::S3::Bucket

  # DynamoDB Table for Subscribers
  SubscribersDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: SubscribersDB
      AttributeDefinitions:
        - AttributeName: Email
          AttributeType: S
      KeySchema:
        - AttributeName: Email
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # IAM Role for Lambda Functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LambdaPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt SQSQueue1.Arn
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                Resource: !GetAtt SubscribersDB.Arn
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::${InvalidRecordsBucket}/*"

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL for subscriber validation"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/subscribe"
  SQSQueueUrl:
    Description: "URL of the SQS queue for valid records"
    Value: !Ref SQSQueue1
  S3BucketName:
    Description: "Name of the S3 bucket for invalid records"
    Value: !Ref InvalidRecordsBucket
  DynamoDBTableName:
    Description: "Name of the DynamoDB table for subscribers"
    Value: !Ref SubscribersDB
